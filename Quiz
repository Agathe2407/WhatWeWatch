<div id="player-info-container"></div>
<div id="question-container"></div>
<div id="answers-container"></div>
<div id="result-container" style="display: none;"></div>

<script>
// Liste des √©motions possibles avec leurs emojis
const emotions = [
  { name: "Fatigu√©", emoji: "üò¥" },
  { name: "Stress√©", emoji: "üò¨" },
  { name: "Enthousiaste", emoji: "üòÑ" },
  { name: "D√©tendu", emoji: "üòå" },
  { name: "Heureux", emoji: "üòä" }
];

// Liste de films, s√©ries et documentaires recommand√©s
const movieLibrary = [
  { title: "Mamma Mia! (2008)", type: "film", genre: "Com√©die", ending: "Fin heureuse", ambiance: "Festif" },
  { title: "Fast & Furious 7 (2015)", type: "film", genre: "Action", ending: "Peu importe", ambiance: "Entre amis" },
  { title: "The Notebook (2004)", type: "film", genre: "Romance", ending: "Fin heureuse", ambiance: "Cosy" },
  { title: "The Sixth Sense (1999)", type: "film", genre: "Horreur", ending: "Twist impr√©visible", ambiance: "Entre amis" },
  { title: "Coco (2017)", type: "film", genre: "Animation", ending: "Fin heureuse", ambiance: "En famille" },
  { title: "Stranger Things (2016)", type: "s√©rie", genre: "Science-fiction", ending: "Twist impr√©visible", ambiance: "Entre amis" },
  { title: "The Mandalorian (2019)", type: "s√©rie", genre: "Science-fiction", ending: "Peu importe", ambiance: "En famille" },
  { title: "Friends (1994)", type: "s√©rie", genre: "Com√©die", ending: "Fin heureuse", ambiance: "Festif" },
  { title: "Breaking Bad (2008)", type: "s√©rie", genre: "Drame", ending: "Twist impr√©visible", ambiance: "Entre amis" },
  { title: "The Social Dilemma (2020)", type: "documentaire", genre: "Soci√©t√©", ending: "Peu importe", ambiance: "En famille" },
  { title: "13th (2016)", type: "documentaire", genre: "Soci√©t√©", ending: "Peu importe", ambiance: "Entre amis" }
];

// Liste de questions avec des d√©fis int√©gr√©s
const questions = [
  { question: "Quel genre de film mettrait tout le monde d'accord ?", options: ["Com√©die", "Action", "Romance", "Animation"], challenge: "Le joueur le plus jeune doit imiter une sc√®ne d'un film correspondant au genre choisi !" },
  { question: "Quelle dur√©e pr√©f√©reriez-vous pour ce soir ?", options: ["Court-m√©trage", "√âpisode de s√©rie", "Long m√©trage", "Documentaire"] },
  { question: "Quel type de fin serait id√©al pour ce groupe ?", options: ["Fin heureuse", "Twist impr√©visible", "Peu importe"] },
  { question: "Le joueur ayant vu le plus de films doit citer trois genres de films. Choisissez celui qui vous attire le plus !", options: ["Action", "Horreur", "Com√©die", "Science-fiction"] },
  { question: "Quel mood d√©crit le mieux l'ambiance de la soir√©e ?", options: ["Festif", "Cosy", "En famille", "Entre amis"], challenge: "Celui qui a organis√© la soir√©e doit chanter une chanson en lien avec le mood choisi !" },
  { question: "Le joueur ayant vu le moins de films doit choisir une d√©cennie ; trouvez un film de cette √©poque qui plaira √† tout le monde !", options: ["Ann√©es 80", "Ann√©es 90", "Ann√©es 2000", "Ann√©es 2010", "Ann√©es 2020"] }
];

// Variables pour le quiz
let currentQuestionIndex = 0;
let answersHistory = [];
let players = [];
let chosenType = "film"; // Valeur par d√©faut √† "film"

// D√©marrer la collecte d'infos joueurs
askPlayersInfo();

// Fonction pour demander et g√©rer les informations des joueurs
function askPlayersInfo() {
  const numPlayers = parseInt(prompt("Combien de joueurs participent √† ce quiz ?"));

  // V√©rifier que le nombre de joueurs est valide
  if (numPlayers && numPlayers > 0) {
    for (let i = 0; i < numPlayers; i++) {
      players.push({ name: `Joueur ${i + 1}`, mood: null });
    }
    showMoodSelection();
  } else {
    alert("Veuillez entrer un nombre valide de joueurs.");
    askPlayersInfo(); // Relance la fonction si l'entr√©e est invalide
  }
}

// Fonction pour afficher la s√©lection d'humeur pour chaque joueur
function showMoodSelection() {
  const playerInfoContainer = document.getElementById("player-info-container");
  playerInfoContainer.innerHTML = "<h2>S√©lection d'humeur</h2>";

  players.forEach((player, index) => {
    const playerMoodContainer = document.createElement("div");
    playerMoodContainer.innerHTML = `<p>${player.name}, comment te sens-tu aujourd'hui ?</p>`;
    
    emotions.forEach(emotion => {
      const button = document.createElement("button");
      button.innerHTML = emotion.emoji;
      button.classList.add("emotion-button");
      button.onclick = () => {
        players[index].mood = emotion;
        checkAllPlayersSelected();
      };
      playerMoodContainer.appendChild(button);

      // Ajout de la l√©gende sous chaque emoji
      const legend = document.createElement("p");
      legend.textContent = emotion.name;
      legend.style.fontSize = "12px";
      legend.style.marginTop = "5px";
      playerMoodContainer.appendChild(legend);
    });
    
    playerInfoContainer.appendChild(playerMoodContainer);
  });
}

// Fonction pour v√©rifier si tous les joueurs ont s√©lectionn√© leur humeur
function checkAllPlayersSelected() {
  if (players.every(player => player.mood !== null)) {
    displayPlayerMoods();
    displayQuestion();
  }
}

// Afficher les humeurs des joueurs avant de commencer le quiz
function displayPlayerMoods() {
  const playerInfoContainer = document.getElementById("player-info-container");
  playerInfoContainer.innerHTML = "<h2>Profils des joueurs</h2>";

  players.forEach(player => {
    playerInfoContainer.innerHTML += `<p>${player.name} - Humeur: ${player.mood.emoji} ${player.mood.name}</p>`;
  });
  playerInfoContainer.innerHTML += "<hr><p>Le quiz va commencer !</p>";
}

// Fonction pour afficher la question actuelle et ses options
function displayQuestion() {
  const question = questions[currentQuestionIndex];
  const questionContainer = document.getElementById("question-container");
  const answersContainer = document.getElementById("answers-container");

  questionContainer.innerHTML = `<p>${question.question}</p>`;
  answersContainer.innerHTML = "";

  question.options.forEach(option => {
    const answerButton = document.createElement("button");
    answerButton.textContent = option;
    answerButton.classList.add("answer-button");
    answerButton.onclick = () => handleAnswer(option);
    answersContainer.appendChild(answerButton);
  });

  if (question.challenge) {
    const challengeText = document.createElement("p");
    challengeText.textContent = question.challenge;
    challengeText.style.color = "orange";
    questionContainer.appendChild(challengeText);
  }
}

// G√©rer la r√©ponse et passer √† la question suivante
function handleAnswer(answer) {
  if (currentQuestionIndex === 1) {
    // Mettre √† jour le type choisi bas√© sur la r√©ponse
    if (answer === "√âpisode de s√©rie") {
      chosenType = "s√©rie";
    } else if (answer === "Documentaire") {
      chosenType = "documentaire";
    } else {
      chosenType = "film";
    }
  }
  answersHistory.push(answer);
  currentQuestionIndex++;
  if (currentQuestionIndex < questions.length) {
    displayQuestion();
  } else {
    displayRecommendation();
  }
}

// Fonction pour recommander un film, une s√©rie ou un documentaire en fonction des r√©ponses
function recommanderFilm(genre, fin, ambiance) {
  const exactMatch = movieLibrary.find(movie => movie.genre === genre && movie.ending === fin && movie.ambiance === ambiance && movie.type === chosenType);
  if (exactMatch) {
    return `${exactMatch.title} (${exactMatch.type}) - Genre: ${exactMatch.genre}, Fin: ${exactMatch.ending}, Ambiance: ${exactMatch.ambiance}`;
  }

  // Recherche de correspondances partielles
  const partialMatch = movieLibrary.filter(movie => movie.genre === genre || movie.ending === fin || movie.ambiance === ambiance);
  if (partialMatch.length > 0) {
    const matchedMovie = partialMatch[Math.floor(Math.random() * partialMatch.length)];
    return `${matchedMovie.title} (${matchedMovie.type}) - Genre: ${matchedMovie.genre}, Fin: ${matchedMovie.ending}, Ambiance: ${matchedMovie.ambiance}`;
  }

  return "D√©sol√©, aucune recommandation pr√©cise. Essayez une autre combinaison !";
}

// Affichage du r√©sultat final
function displayRecommendation() {
  const genre = answersHistory[0];
  const ending = answersHistory[2];
  const ambiance = answersHistory[4];

  const resultContainer = document.getElementById("result-container");
  resultContainer.style.display = "block";
  resultContainer.innerHTML = `<h2>Votre recommandation :</h2><p>${recommanderFilm(genre, ending, ambiance)}</p>`;

  // Ajouter un bouton pour faire d'autres choix
  const otherChoicesButton = document.createElement("button");
  otherChoicesButton.textContent = "Autres choix";
  otherChoicesButton.classList.add("other-choice-button");
  otherChoicesButton.onclick = () => displayRecommendation();  // Afficher un autre film
  resultContainer.appendChild(otherChoicesButton);
}

// Styles
const style = document.createElement("style");
style.innerHTML = `
  .emotion-button,
  .answer-button {
    background-color: #F58AA0;
    color: white;
    border-radius: 25px;
    padding: 10px 20px;
    margin: 5px;
    border: none;
    cursor: pointer;
    font-size: 16px;
  }

  .emotion-button:hover,
  .answer-button:hover {
    background-color: #E74680;
  }

  .other-choice-button {
    background-color: #4CAF50; /* Vert */
    color: white;
    border-radius: 25px;
    padding: 10px 20px;
    margin: 5px;
    border: none;
    cursor: pointer;
    font-size: 16px;
  }

  .other-choice-button:hover {
    background-color: #45a049; /* Vert plus fonc√© au survol */
  }

  #result-container {
    font-family: Arial, sans-serif;
    font-size: 18px;
    color: #333;
    margin-top: 20px;
  }

  #result-container p {
    color: green;
  }

  #question-container {
    margin-top: 20px;
  }
`;
document.head.appendChild(style);

</script>
